using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Telerik.Web.UI;
using System.Collections;
using System.Data.Objects;
using System.Collections.Specialized;
using Pinsonault.Data;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Data.Common;
using System.Drawing;
using PathfinderModel;
using System.Globalization;
using Pinsonault.Application.FormularyHistoryReporting;
using System.Reflection;

public partial class custom_pinso_formularyhistoryreporting_controls_formularycomparison : System.Web.UI.UserControl
{  
    string dataField = null;
    string tableName = null;
    string planLevelTableName = null;
    IList<string> keys = new List<string>();
    List<int> timeFrame = null;
    int totalperpage = 30;

    /// <summary>
    /// Following values are derived from fhr.Lkp_Display_Options table
    /// </summary>
    public enum LkpDisplayOptions
    {
        Tier = 1,
        F_Status = 2,
        PA = 3,
        QL = 4,
        ST = 5,
        CoPay = 6
    }
    public Telerik.Web.UI.RadGrid HostedGrid
    {
        get { return gridFHX; }
    }   

    protected void Page_Load(object sender, EventArgs e)
    {
        divPage.Visible = false;
        btnPrevious.Visible = true;
        btnNext.Visible = true;
        
        NameValueCollection queryValues = new NameValueCollection(Request.QueryString);      

        //if (!string.IsNullOrEmpty(queryValues["Plan_ID"]) && !string.IsNullOrEmpty(queryValues["Drug_ID"]))
        if (!string.IsNullOrEmpty(queryValues["Section_ID"]) && !string.IsNullOrEmpty(queryValues["Drug_ID"]))
        {           
            IEnumerable<GenericDataRecord> g = null;
            IList<int> timeFrameVals = new List<int>();
            IList<int> display_optionsVals = new List<int>();

            //Add keys for query, used for inner join in pivot condition 
            keys.Add("Plan_ID");
            keys.Add("Drug_ID");
            keys.Add("Formulary_ID");
            keys.Add("Segment_ID");
            keys.Add("Plan_Product_ID");


            // check to make sure calendar is selected
          
            int iSectionID = Convert.ToInt32(queryValues["Section_ID"]);
            FHXProvider fhr = new FHXProvider();

            timeFrameVals = fhr.GetTimeFrameVals(queryValues, iSectionID);
            display_optionsVals = fhr.GetDisplayOptionList(queryValues, iSectionID);

            planLevelTableName = "V_GetFHXData_Geography"; //"V_GetPlanProductFormularyData";

            //string PlanID = queryValues["Plan_ID"];
            string DrugID = queryValues["Drug_ID"];
            string SectionID = queryValues["Section_ID"];

            string geography_id = "us";
            string dataField = "";

            bool isMonth = false;
            if (iSectionID == 17) isMonth = true;

            if (timeFrameVals.Count > 0)
            {
                //Check if page count is needed
                bool getPageCount = false;
                NameValueCollection n = null;

                if (!string.IsNullOrEmpty(Request.QueryString["Next"]) && Request.QueryString["Next"] == "true")
                {
                    lblPageIndex.Text = Convert.ToString(Convert.ToInt32(lblPageIndex.Text) + 1);
                }

                if (!string.IsNullOrEmpty(Request.QueryString["Previous"]) && Request.QueryString["Previous"] =="true" && lblPageIndex.Text != "1")
                {
                    lblPageIndex.Text = Convert.ToString(Convert.ToInt32(lblPageIndex.Text) - 1);
                }

                if ((!string.IsNullOrEmpty(queryValues["RequestPageCount"])) && (Convert.ToBoolean(queryValues["RequestPageCount"]) == true))
                {
                    n = new NameValueCollection(queryValues);
                    getPageCount = true;
                    n["PagingEnabled"] = "false";
                }

                if (getPageCount)
                    g = fhr.GetData(timeFrameVals, geography_id, planLevelTableName, dataField, keys, n, display_optionsVals);
                else
                {
                    divPage.Visible = true;
                    queryValues.Add("StartPage", lblPageIndex.Text);
                    queryValues.Add("TotalPerPage", Convert.ToString(totalperpage)); //queryValues.Add("TotalPerPage", Convert.ToString(Math.Round(g.Count() * 1.00 / totalperpage)));
                    queryValues.Add("pagingEnabled", "true");
                    g = fhr.GetData(timeFrameVals, geography_id, planLevelTableName, dataField, keys, queryValues, display_optionsVals);
                }

                if (g.Count() > 0)
                {
                    ProcessGrid(gridFHX, isMonth, g, display_optionsVals, queryValues, timeFrameVals);
                    divPage.Visible = true;
                    fhrColorLegend.Visible = true;
                    divNoRecords.Visible = false;
                    //added for page index                    
                    //lblPageCount.Text = string.Format(" of {0}", Math.Round(g.Count() * 1.00 / totalperpage));
                }
                else
                {
                    divNoRecords.Visible = true;
                    divPage.Visible = false;
                }

                if (lblPageIndex.Text == "1")
                    btnPrevious.Visible = false;

                if (g.Count() < totalperpage)
                    btnNext.Visible = false;
               
            }
        }
    }      
    

    public void ProcessGrid(RadGrid grid, bool isMonth, IEnumerable<GenericDataRecord> g, IList<int> displayoptionsVals, NameValueCollection queryVals, IList<int> timeFrameVals)
    {
        List<int> displayoptions = displayoptionsVals.ToList();
        
        for (int x = 0; x < displayoptions.Count; x++)
        {
            switch (displayoptions[x])
            {
                case (int)LkpDisplayOptions.Tier:                    
                    addGridColumn(grid, "Tier_Name", timeFrameVals, isMonth);
                    break;
                case (int)LkpDisplayOptions.CoPay:                    
                    addGridColumn(grid, "Co_Pay", timeFrameVals, isMonth);
                    break;
                case (int)LkpDisplayOptions.F_Status:                    
                    addGridColumn(grid, "Formulary_Status_Name", timeFrameVals, isMonth);
                    break;
                case (int)LkpDisplayOptions.PA:                    
                    addGridColumn(grid, "PA", timeFrameVals, isMonth);
                    break;
                case (int)LkpDisplayOptions.QL:                    
                    addGridColumn(grid, "QL", timeFrameVals, isMonth);
                    break;
                case (int)LkpDisplayOptions.ST:                    
                    addGridColumn(grid, "ST", timeFrameVals, isMonth);
                    break;
            }
        }
        //grid.ClientSettings.Scrolling.FrozenColumnsCount = 8;

        grid.DataSource = g;
        //rename "Benefit Design" as "Formulary" for Med D , field name used - "Formulary_Name"
        if (Request.QueryString["Section_ID"] == "17")
            grid.Columns[5].HeaderText = "Formulary";

        //show product name only in case of Med D
        if (Request.QueryString["Section_ID"] == "17")
            grid.Columns[3].Visible = true;
        else
            grid.Columns[3].Visible = false;

        grid.DataBind();

    }

    public void addGridColumn(RadGrid grid,string ColName,IList<int> timeframe,bool isMonth)
    {
        // comparative report there would be always two time frame values     
       
        for (int i = 0; i < timeframe.Count; i++)
        {
            GridBoundColumn column = null;
            
            //must add column to collection before setting properties
            column = new GridBoundColumn();
            if (isMonth)
                column.HeaderText = string.Format("{0} {1}", CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Convert.ToInt32(timeframe[i].ToString().Substring(4))), timeframe[i].ToString().Substring(0, 4));
            else
                column.HeaderText = string.Format("Q{0} {1}", timeframe[i].ToString().Substring(5), timeframe[i].ToString().Substring(0, 4));

            column.DataField = string.Format("{0}{1}", ColName, i);
            grid.Columns.Add(column);

            column.UniqueName = ColName;
            
            //column.HeaderTemplate = grid.Page.LoadTemplate(headerTemplate);
            //column.ItemTemplate = grid.Page.LoadTemplate(dataTemplate);
        }
    }
   
    private string GetDisplayOptionName(int displayid)
    {
        string displayname = string.Empty;
        switch (displayid)
        {
            case 1:
                displayname = "Tier";
                break;
            case 2:
                displayname = "Status";
                break;
            case 3:
                displayname = "PA";
                break;
            case 4:
                displayname = "QL";
                break;
            case 5:
                displayname = "ST";
                break;
            case 6:
                displayname = "Co-Pay";
                break;
        }      

        return displayname;
    }

    protected void SetupDualHeaders(object sender, EventArgs e)
    {
        RadGrid _grid = ((RadGrid)sender);

        //get the current header     
        GridItem[] header = _grid.MasterTableView.GetItems(GridItemType.Header);
        //get the current THead element   
        if (header.Count() > 0)
        {
            GridTHead head = ((GridTHead)header[0].Parent.Controls[0].Parent);

            GridHeaderItem newHeaderItem = new GridHeaderItem(_grid.MasterTableView, 0, 0);

            IList<int> displayoptions = new List<int>();
            FHXProvider fhp = new FHXProvider();
            displayoptions = fhp.GetDisplayOptionList(Request.QueryString, Convert.ToInt32(Request.QueryString["Section_ID"]));


            SortedList FormatCells = new SortedList();
            int iStatic = 6; //static col index

            if (Request.QueryString["Section_ID"] == "17")
                iStatic = 7;
            else
                newHeaderItem.Cells.Add(new GridTableHeaderCell() { Text = "&nbsp;" });

            for (int iCol = 1; iCol <= iStatic; iCol++)
            {
                FormatCells.Add(iCol, ",1,1");
            }   
           
            //Add Header rows pass in this order - column index, required no of column, rows

            for (int i = 0; i < displayoptions.Count; i++)
            {
                int j = iStatic + i + 1 ;
                string col1 = GetDisplayOptionName(displayoptions[i]);//displayoptions[i].ToString();               

                FormatCells.Add(j, string.Format("{0},2,1", col1));
            }


            newHeaderItem.Cells.Add(new GridTableHeaderCell() { Text = "&nbsp;" });
            newHeaderItem.Cells.Add(new GridTableHeaderCell() { Text = "&nbsp;" });           

            IDictionaryEnumerator enumCels = FormatCells.GetEnumerator();
            while (enumCels.MoveNext())
            {
                string[] count = enumCels.Value.ToString().Split(Convert.ToChar(","));

                int iColSpan = 0;
                if (!string.IsNullOrEmpty(count[1]))
                    iColSpan = Convert.ToInt32(count[1]);

                if (!string.IsNullOrEmpty(count[0]) && iColSpan > 1)
                    newHeaderItem.Cells.Add(new GridTableHeaderCell() { Text = count[0], ColumnSpan = iColSpan, HorizontalAlign = HorizontalAlign.Center });
                else
                    newHeaderItem.Cells.Add(new GridTableHeaderCell() { Text = "&nbsp;" });


            }

            for (int i = 0; i < head.Controls.Count; i++)
            {
                // loop through the header controls collection and find the 'row' that has the same type of GridHeaderItem
                // Then insert the new row just above it - remember the 0 based index will push the original header row down 
                if (head.Controls[i].GetType() == newHeaderItem.GetType())
                {
                    head.Controls.AddAt(i, newHeaderItem);
                }

            }
        }
    }

 
    protected void gridFHX_ItemCreated(object sender, GridItemEventArgs e)
    {
        IList<int> display_optionsVals = new List<int>();
        FHXProvider fhr = new FHXProvider();
        display_optionsVals = fhr.GetDisplayOptionList(Request.QueryString, Convert.ToInt32(Request.QueryString["Section_ID"]));

        if (e.Item.ItemType == GridItemType.AlternatingItem || e.Item.ItemType == GridItemType.Item)
        {
              
            int iChangeColIndex = 0;
            int i = 0;
            int istatic = 7; //index of static columns-  Account name,State,Pharmacy Lives,Drug Name
            if (Request.QueryString["Section_ID"] == "17")
                istatic = 8; //product name is present for MEd D

            foreach (int idisp in display_optionsVals)
            {
                i = display_optionsVals.IndexOf(idisp) + 1;
                iChangeColIndex = istatic + 2 * i;
                switch (idisp)
                {
                    case 1:
                        if ((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetValue((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetOrdinal("Is_Tier_Name_Changed")).ToString() == "1")
                            e.Item.Cells[iChangeColIndex].BackColor = Color.Yellow;
                        break;
                    case 2:
                        if ((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetValue((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetOrdinal("Is_Formulary_Status_Name_Changed")).ToString() == "1")
                            e.Item.Cells[iChangeColIndex].BackColor = Color.Yellow;
                        break;
                    case 3:
                        if ((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetValue((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetOrdinal("Is_PA_Changed")).ToString() == "1")
                            e.Item.Cells[iChangeColIndex].BackColor = Color.Yellow;
                        break;
                    case 4:
                        if ((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetValue((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetOrdinal("Is_QL_Changed")).ToString() == "1")
                            e.Item.Cells[iChangeColIndex].BackColor = Color.Yellow;
                        break;
                    case 5:
                        if ((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetValue((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetOrdinal("Is_ST_Changed")).ToString() == "1")
                            e.Item.Cells[iChangeColIndex].BackColor = Color.Yellow;
                        break;
                    case 6:
                        if ((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetValue((((Pinsonault.Data.GenericDataRecord)(e.Item.DataItem))).GetOrdinal("Is_Co_Pay_Changed")).ToString() == "1")
                            e.Item.Cells[iChangeColIndex].BackColor = Color.Yellow;
                        break;
                }
                iChangeColIndex = istatic; //reset to static col index
            }
           
        }
    }    

   
}
